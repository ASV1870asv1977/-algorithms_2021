"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""


from timeit import timeit


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    count_numbers = [array.count(x) for x in array]
    max_count = max(count_numbers)
    return f'Чаще всего встречается число {array[count_numbers.index(max_count)]}, ' \
           f'оно появилось в массиве {max_count} раз(а)'


def func_4():
    number = max(array, key=array.count)
    count = array.count(number)
    return f'Чаще всего встречается число {number}, ' \
           f'оно появилось в массиве {count} раз(а)'


array = [1, 3, 1, 3, 4, 5, 1]

print(f'func_1: {func_1()}')
print(f'func_2: {func_2()}')
print(f'func_3: {func_3()}')
print(f'func_4: {func_4()}')

print('-' * 50)

print(f'func_1: {timeit("func_1()", globals=globals(), number=10000)}')
print(f'func_2: {timeit("func_2()", globals=globals(), number=10000)}')
print(f'func_3: {timeit("func_3()", globals=globals(), number=10000)}')
print(f'func_4: {timeit("func_4()", globals=globals(), number=10000)}')

"""
Проведены замеры 4-х функций определения числа, которое встречается в массиве чаще всего:
    func_1 - обход списка с определением количества вхождения элемента и сравнением этого 
             значения с предыдущим, с последующим определением элемента.
             1-е место (90 % результатов).  
             2-е место (10 % результатов);
             
    func_2 - формирование в цикле списка с элементами - количество вхождения элементов 
             материнского списка, с определением максимального значения дочернего списка, 
             определения индекса этого элемента с последующим определением значения материнского 
             списка по полученному индексу.
             4-е место (100 % результатов);
             
    func_3 - формирование с помощью list comprehension списка с элементами - количество вхождения 
             элементов материнского списка, с определением максимального значения дочернего списка, 
             определения индекса этого элемента с последующим определением значения материнского 
             списка по полученному индексу.
             3-е место (90 % результатов).  list comprehension выполняется быстрее цикла.
             2-е место (10 % результатов);
    
    func_4 - определение максимального значения в списке по установленному ключу (функции преобразующей
             материнский список);
             2-е место (90 % результатов).  
             1-е место (10 % результатов);

Распределение мест осуществлялось по результатам измерений определенных империческим способом.
"""

